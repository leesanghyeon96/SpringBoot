JPA 사용을 위한 환경 구성
1. H2 DataBase : 테스트 환경에서 많이 사용. ==> Oracle (서비스 환경)
	- 라이브러리 추가 : bulid.gradle 파일에서 추가
		runtimeOnly 'com.h2database:h2'
	- db 연결설정 : applicatoin.properties
		spring.h2.console.enabled=true
		spring.h2.console.path=/h2-console
		spring.datasource.url=jdbc:h2:~/local
		spring.datasource.driverClassName=org.h2.Driver
		spring.datasource.username=sa
		spring.datasource.password=
	- H2 DataBase 파일을 생성 : ~ : 로그온한 계정의 홈폴더.(C:\user\계정)
		~/local.mv.db(로그온계정 홈폴더에 생성)	<== H2 데이터 베이스의 DataBase 파일
			 cd ~
			 touch local.mv.db
	
	- H2 DataBase 접속 : 프로젝트시작 크롬 URL : http://localhost:9898/h2-console/

2. JPA 설정

	- 의존성 라이브러리 추가 : build.gradle
		implementation 'org.springframework.boot:spring-boot-starter-date-jpa'
	- JPA 설정 : applicatoin.properties
		#JPA ( JPA는 H2 DB와 연결설정, 변경사항만 업데이트됨 )
		spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.H2Dialect
		spring.jpa.hibernate.ddl-auto=**update**	#주의요함 : 운영환경에서는 none, validate
			# none : 엔티티(자바의 dto)가 변경되더라도 데이터베이스를 변경하지 않도록 설정
			# update : 엔티티 변경된 부분만 데이터베이스에 적용됨
			# validate : 변경사항이 있는지 확인만 함 (DB반영 X)
			# create : 스프링 부트가 작동될때 DB의 테이블을 Drop하고 다시 생성함.
			# create-drop : create와 동일함. , 스프링부트가 종료될때 테이블 삭제(drop)
			
3. 엔티티 클래스 작성 : @Entity 어노테이션이 붙는 자바 클래스
	엔티티 : 데이터베이스 테이블과 매핑되는 자바 클래스 <== DTO의 클래스 이름이 테이블명과 매핑,
		dto의 필드명은 테이블의 컬럼명과 일치
		
		-- Question.java	: 부모
		-- Answer.java		: 자식

JPA는 DB의 테이블 컬럼이 수정, 생성, 삭제 가 빈번하게 발생시 유지보수를 아주 쉽게 할 수 있다.
	- JPA를 사용하지 않는경우 DB의 테이블이 수정이 발생시 dto, dao(insert, update, delete, get, getList)를 전부 바꿔야한다.
	- 단점 : 테이블이 복잡한 조인으로 연결된 경우나, 복잡한 계산을 처리하는 환경에서는 적합하지 않다.
			(MyBatis : 유지보수도 쉽게하고, 복잡한 계산처리도 가능)

4. 레파지토리(Repository) 클래스 : DAO : 자바 클래스의 JPA 메소드를 사용해서
		SQL의 CRUD (Insert, Select, Update, Delete)
	- JPA를 사용해서 DB를 CRUD 할려면 Repository 인터페이스를 생성해야 한다.
	- JPARepository 를 상속해서 만들어야한다.


====================================================================================

 실습 : sbb2 프로잭트에서 진행하세요. H2 DataBase를 사용 하세요.  
     JPA Entity 클래스 실습, JPA 메소드를 사용해서 CRUD , save(), findAll(), 
 
 아래 내용의 JPA Entity 클래스를 생성 하세요. 
 테이블명 : users							<== user 는 예약어 
      idx   primary key, 자동증가(1,1) 
      name  varchar(100) 
      pass  varchar(100) 
      email varchar(200) 
      regdate LoacalDateTime 
      cnt	int 
      
 --임의의  값을 5개 insert 
 --넣은 값을 regdate 컬럼을 기준으로 내림차순( Desc ) 정렬 
 -- idx 3 번의 name 과 email 주소를 수정 
 -- idx 4 번의 값을 삭제 
 
 sbb2프로잭트 폴더 압축 : 조명_이름.zip 
 업로드 URL : https://url.kr/u86s1c
 
 
====================================================================================

Transaction (트랜잭션) : 일(작업)을 처리하는 최소단위
- 트랜잭션이 시작되면 트랜잭션 완료까지 Lock이 걸림
- 트랜잭션이 발생되면 SQL Log에 모두 기록이됨.
- DML문에서 트랜잭션이 발생, (Insert, Update, Delete)
- 트랜잭션이 발생되고 commit되기 전까지는 RAM에만 적용
- rollback (트랜잭션 발생시점으로 되돌림)
- commit (DB에 영구적으로 적용)
- Oracle Insert, Update, Delete 구문이 발생되면 자동으로 트랜잭션시작
	- commit;
- MSSQL, MySQL -> 자동 커밋 트랜잭션 (Statement, preparedStatement)
- 백업 시점이 아니라 오류가 발생된 시점으로 되돌릴 수 있다.
- All or Nothing : 되면 전부 완료되게 하거나 원점으로 되돌려 줘야한다.

====================================================================================

<실습>
프로젝트 : Sbb2
  - users 테이블에 저장된 레코드를 View Page에서 출력
  
  usersRepository 를 Controller에서 생성자 주입
  
  client 요청 : http://localhost:0000/user_list
  view page : users_list.html

  sbb2프로잭트 폴더 압축 : 조명_이름.zip 
  업로드 URL : https://url.kr/u86s1c
  
====================================================================================
Service 클래스 : 비즈니스 로직을 처리함.
	- 규모가 큰 사이트에서 비즈니스로직을 간략하게 처리할 수 있다.
	- 유지 보수가 빈번한 경우 유지 보수를 쉽게 구현할 수 있다.
	- 보안을 강화 할 수 있다.

Client ===> Controller ==> Service (비즈니스 로직처리, dto, dao) ==> DAO => DB
====================================================================================

 <실습> sbb2		:	  <userController>	<Service>	<Repository>
 테이블명 : users							<== user 는 예약어 
      idx   primary key, 자동증가(1,1) 
      name  varchar(100) 
      pass  varchar(100) 
      email varchar(200) 
      regdate LoacalDateTime 
      cnt	int 

 1. users테이블에 : 1000개의 더미값 입력
 	name : "이름 - " + 숫자
 	pass : "pass" + 숫자
 	email : "메일주소 - " + 숫자
 	regdate : 현재 날짜
 	cnt : 번호
 
 2. Client 요청 : http://localhost:0000/user_detail/1
 	view page : users_detail.html
 	
 	view page : users_insert.html
 	http://localhost:0000/user_insert
 	
  sbb2프로잭트 폴더 압축 : 조명_이름.zip 
  업로드 URL : https://url.kr/u86s1c

--> 작업
1. sbb2ApplicationTest에서 더미테이블값 insert
-> 1. users테이블에 : 1000개의 더미값 입력 (완료)
2. UsersService 클래스생성(List에 담아 테이블의 정보를 가져오는 메소드 생성)
3. Controller에서 Repository가 아닌 Service로 바꾸기
-> localhost:9999/users/list
4. <a>로 인풋 페이지(users_insert) 생성 (action을 form에 담기)
5. service에 인풋값을 저장하는 메소드 생성
6. controller를 통해 값을 넣기
 	
====================================================================================
Spring Framework를 사용한 폼 태그 내의 유효성 검사
1. 라이브러리 등록 :
	build.gradle에 등록
			// Spring에서 제공해주는 유효성 검사 라이브러리 : form에서 반값이나 글자수 제한
			implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
			
2. 유효성 검사 클래스 생성 (QuestionForm.java)
	@Getter
	@Setter
	
	유효성 검사 필드 : subject, content
 	
====================================================================================
 	
부트스트랩 - FrontEnd를 쉽게 사용한 수 있도록
 	
 	
====================================================================================
STS에서 포트가 충돌나서 실행이 안되는 경우 (-> 포트 강제 제거)
1. 관리자 권한의 명령프롬프트로 실행
2. netstat -nao : 열려있는 포트의 PID 확인 
	(PID : 프로세스(메모리의 로드된 프로그램)의 고유번호)
3. taskkill /f /pid 포트의PID번호
 	
====================================================================================
페이징처리 : 스프링에는 JPA에서 제공해주는 객체를 사용
	- 스프링에는 페이징을 처리하기 위한 별도의 라이브러리가 필요하다. 	
 	- 기본적으로 JPA 페이징 처리를 위한 객체가 존재한다.
 	- Page
 	- PageRequest
 	- pageable
 	
 	
 	
 	
 	
 	
 	
 	










